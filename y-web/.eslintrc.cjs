module.exports = {
  extends: [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
  ],
  parser: "@typescript-eslint/parser",
  parserOptions: {
    tsconfigRootDir: __dirname,
    project: ["./tsconfig.json"],
  },
  plugins: ["@typescript-eslint"],
  root: true,
  rules: {
    // ESLint - errors
    "no-constant-binary-expression": "error",
    "array-callback-return": "error",
    "no-await-in-loop": "error",
    "no-duplicate-imports": "error",
    "no-promise-executor-return": "error",
    "no-self-compare": "error",
    "no-template-curly-in-string": "error",
    "require-atomic-updates": "error",
    eqeqeq: "error",
    "func-style": ["error", "declaration", { allowArrowFunctions: true }],
    "no-confusing-arrow": "error",
    "no-eval": "error",
    "no-floating-decimal": "error",
    "no-implicit-coercion": "error",
    "no-implied-eval": "error",
    "no-mixed-operators": "error",
    "no-multi-assign": "error",
    "no-param-reassign": "error",
    "no-return-assign": "error",
    "no-sequences": "error",
    "no-useless-computed-key": "error",
    "no-useless-concat": "error",
    "no-var": "error",
    "prefer-promise-reject-errors": "error",
    radix: "error",
    "eol-last": "error",
    indent: ["error", 2],
    semi: ["error", "always"],
    "prefer-const": "error",
    "semi-spacing": ["error", { before: false, after: true }],
    "arrow-spacing": ["error", { before: true, after: true }],
    "jsx-quotes": ["error", "prefer-double"],
    "linebreak-style": ["error", "unix"],
    "no-tabs": "error",
    "space-before-blocks": ["error", "always"],
    "space-infix-ops": "error",
    "space-unary-ops": ["error", { words: true, nonwords: false }],
    "wrap-iife": ["error", "inside"],
    "no-trailing-spaces": "error",
    "no-unneeded-ternary": "error",
    "no-useless-return": "error",

    // ESLint - warns
    "no-unmodified-loop-condition": "warn",
    "no-unreachable-loop": "warn",

    // Typescript ESLint - errors
    "no-unused-vars": "off",
    "@typescript-eslint/no-unused-vars": "error",
    "default-param-last": "off",
    "@typescript-eslint/default-param-last": "error",
    "no-empty-function": "off",
    "@typescript-eslint/no-empty-function": "error",
    "no-invalid-this": "off",
    "@typescript-eslint/no-invalid-this": "error",
    "no-loop-func": "off",
    "@typescript-eslint/no-loop-func": "error",
    "no-shadow": "off",
    "@typescript-eslint/no-shadow": "error",
    "no-use-before-define": "off",
    "@typescript-eslint/no-use-before-define": ["error", { functions: false }],
    "no-return-await": "off",
    "@typescript-eslint/return-await": "error",
    "@typescript-eslint/no-confusing-void-expression": [
      "error",
      {
        ignoreArrowShorthand: true,
        ignoreVoidOperator: true,
      },
    ],
    "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
    "@typescript-eslint/no-confusing-non-null-assertion": "error",
    "require-await": "off",
    "@typescript-eslint/require-await": "error",
    "func-call-spacing": "off",
    "@typescript-eslint/func-call-spacing": "error",
    quotes: "off",
    "@typescript-eslint/quotes": ["error", "double"],
    "@typescript-eslint/array-type": [
      "error",
      { default: "array-simple", readonly: "array-simple" },
    ],
    "@typescript-eslint/consistent-type-assertions": [
      "error",
      { assertionStyle: "as" },
    ],
    "@typescript-eslint/consistent-type-definitions": ["error", "type"],
    "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
    "@typescript-eslint/method-signature-style": ["error", "property"],
    "@typescript-eslint/prefer-function-type": "error",
    "@typescript-eslint/no-unnecessary-condition": "error",

    // Typescript ESLint - warns
    "no-magic-numbers": "off",
    "@typescript-eslint/no-magic-numbers": ["warn", { ignore: [1, 0] }],
    "@typescript-eslint/promise-function-async": "warn",
  },
};
